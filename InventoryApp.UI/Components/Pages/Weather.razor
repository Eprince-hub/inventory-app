@page "/weather"
@attribute [StreamRendering]

<PageTitle>Weather</PageTitle>

<h1>Weather</h1>

<p>This component demonstrates showing data.</p>

@if (forecasts == null)
{
    <p><em>Loading...</em></p>
}
else
{
    <table class="w-full text-left border-collapse">
        <thead class="border-b border-gray-200">
            <tr>
                <th class="py-3 px-4 font-semibold text-gray-700">Date</th>
                <th class="py-3 px-4 font-semibold text-gray-700" aria-label="Temperature in Celsius">Temp. (C)</th>
                <th class="py-3 px-4 font-semibold text-gray-700" aria-label="Temperature in Farenheit">Temp. (F)</th>
                <th class="py-3 px-4 font-semibold text-gray-700">Summary</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var forecast in forecasts)
            {
                <tr class="hover:bg-gray-100">
                    <td class="py-2 px-4 border-b border-gray-200 text-gray-800">@forecast.Date.ToShortDateString()</td>
                    <td class="py-2 px-4 border-b border-gray-200 text-gray-800">@forecast.TemperatureC</td>
                    <td class="py-2 px-4 border-b border-gray-200 text-gray-800">@forecast.TemperatureF</td>
                    <td class="py-2 px-4 border-b border-gray-200 text-gray-800">@forecast.Summary</td>
                </tr>
            }
        </tbody>
    </table>
}

@code {
    private WeatherForecast[]? forecasts;

    protected override async Task OnInitializedAsync()
    {
        // Simulate asynchronous loading to demonstrate streaming rendering
        await Task.Delay(500);

        var startDate = DateOnly.FromDateTime(DateTime.Now);
        var summaries = new[] { "Freezing", "Bracing", "Chilly", "Cool", "Mild", "Warm", "Balmy", "Hot", "Sweltering", "Scorching" };
        forecasts = Enumerable.Range(1, 5).Select(index => new WeatherForecast
        {
            Date = startDate.AddDays(index),
            TemperatureC = Random.Shared.Next(-20, 55),
            Summary = summaries[Random.Shared.Next(summaries.Length)]
        }).ToArray();
    }

    private class WeatherForecast
    {
        public DateOnly Date { get; set; }
        public int TemperatureC { get; set; }
        public string? Summary { get; set; }
        public int TemperatureF => 32 + (int)(TemperatureC / 0.5556);
    }
}
